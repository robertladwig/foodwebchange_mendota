#  Add p-value
p2 = p2 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'Jz'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'Jz'), method ="kruskal.test")
p3 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'Jz'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'Total oxygen sink',
add = "jitter")
#  Add p-value
p3 = p3 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'Days.0.5.mg.L'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'Days.0.5.mg.L'), method ="kruskal.test")
p4 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'Days.0.5.mg.L'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'Biomass over 0.5 mg/L',
add = "jitter")
#  Add p-value
p4 = p4 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'discharge'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'discharge'), method ="kruskal.test")
p5 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'discharge'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'Discharge',
add = "jitter")
#  Add p-value
p5 = p5 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'Clearwater.Duration'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'Clearwater.Duration'), method ="kruskal.test")
p6 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'Clearwater.Duration'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'Clearwater duration',
add = "jitter")
#  Add p-value
p6 = p6 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'pH'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'pH'), method ="kruskal.test")
p7 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'pH'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'pH',
add = "jitter")
#  Add p-value
p7 = p7 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'PO4.P_surf'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'PO4.P_surf'), method ="kruskal.test")
p8 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'PO4.P_surf'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'PO4-P surf',
add = "jitter")
#  Add p-value
p8 = p8 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'NO3.NO2.N_surf'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'NO3.NO2.N_surf'), method ="kruskal.test")
p9 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'NO3.NO2.N_surf'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'NO3-NO2-N surf',
add = "jitter")
#  Add p-value
p9 = p9 + stat_compare_means()
compare_means(value ~ class, data = m.df.prior %>% dplyr::filter(variable == 'RSi'))
compare_means(value ~ class, data =  m.df.prior %>% dplyr::filter(variable == 'RSi'), method ="kruskal.test")
p10 <- ggboxplot( m.df.prior %>% dplyr::filter(variable == 'RSi'), x = "class", y = "value",
palette = "jco", xlab = '', ylab = 'RSi',
add = "jitter")
#  Add p-value
p10 = p10 + stat_compare_means()
(g5 / g6 / g7 / g9 / g10 /g8 / g11 /g12 /g13/ g14 ) | (p1 / p2 /p3 /p5/p6 /p4 /p7 / p8  / p9 /p10)
ggsave(plot = (g5 / g6 / g7 / g9 / g10 /g8) | (p1 / p2 /p3 /p5/p6 /p4), '../figs/timeseries_comparison.png', dpi = 300, units = 'in', width = 20, height = 17)
ggsave(plot = (g5 / g6 / g7 / g9 / g10 /g8 / g11 /g12 /g13/ g14 ) | (p1 / p2 /p3 /p5/p6 /p4 /p7 / p8  / p9 /p10) + plot_layout(guides = 'collect'), '../figs/timeseries_comparison.png', dpi = 300, units = 'in', width = 20, height = 30)
install.packages('bfast')
install.packages('bfast')
plot(df$year, df$AF)
lines(df$year, df$AF)
Nile
?tf
ts.af =  xts(df$AF, order.by=df$year)
library(xts)
ts.af =  xts(df$AF, order.by=df$year)
ts.af
df$AF
df$year
str(df$year)
ts.af =  xts(df$AF, order.by=year(df$year))
year(df$year)
ts.af =  ts(df$AF, start= 1996, frequency = 1)
ts.af
plot(ts.af)
plot(merge(
AF = as.zoo(ts.af),
zoo(mean(AF), time(AF)),
CUSUM = cumsum(AF - mean(AF)),
zoo(0, time(AF)),
MOSUM = rollapply(AF - mean(AF), 15, sum),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2, 3, 3), main = "", xlab = "Time",
col = c(1, 4, 1, 4, 1, 4) )
AF = as.zoo(ts.af)
AF
zoo(mean(AF), time(AF))
CUSUM = cumsum(AF - mean(AF))
zoo(0, time(AF))
MOSUM = rollapply(AF - mean(AF), 15, sum)
MOSUM
zoo(0, time(AF)
)
merge(
AF = as.zoo(ts.af),
zoo(mean(AF), time(AF)),
CUSUM = cumsum(AF - mean(AF)),
zoo(0, time(AF)),
MOSUM = rollapply(AF - mean(AF), 15, sum),
zoo(0, time(AF))
)
plot(merge(
AF = as.zoo(ts.af),
zoo(mean(AF), time(AF)),
CUSUM = cumsum(AF - mean(AF)),
zoo(0, time(AF)),
MOSUM = rollapply(AF - mean(AF), 15, sum),
zoo(0, time(AF))
)
)
plot(merge(
AF = as.zoo(ts.af),
zoo(mean(AF), time(AF)),
CUSUM = cumsum(AF - mean(AF)),
zoo(0, time(AF)),
MOSUM = rollapply(AF - mean(AF), 15, sum),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2, 3, 3), main = "", xlab = "Time",
col = c(1, 4, 1, 4, 1, 4) )
plot(merge(
AF = as.zoo(ts.af),
zoo(mean(AF), time(AF)),
CUSUM = cumsum(AF - mean(AF)),
zoo(0, time(AF)),
MOSUM = rollapply(AF - mean(AF), 4, sum),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2, 3, 3), main = "", xlab = "Time",
col = c(1, 4, 1, 4, 1, 4) )
plot(merge(
AF = as.zoo(ts.af),
zoo(c(NA, cumsum(head(AF, -1))/1:99), time(AF)),
CUSUM = cumsum(c(0, recresid(lm(AF ~ 1)))),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2), main = "", xlab = "Time",
col = c(1, 4, 1, 4) )
AF = as.zoo(ts.af)
zoo(c(NA, cumsum(head(AF, -1))/1:99), time(AF))
plot(merge(
AF = as.zoo(ts.af),
zoo(c(NA, cumsum(head(AF, -1))/1:99), time(AF)),
CUSUM = cumsum(c(0, recresid(lm(AF ~ 1)))),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2), main = "", xlab = "Time",
col = c(1, 4, 1, 4) )
CUSUM = cumsum(c(0, recresid(lm(AF ~ 1))))
??recresid
library(strucchange)
install.packages(strucchange)
install.packages('strucchange')
plot(merge(
AF = as.zoo(ts.af),
zoo(c(NA, cumsum(head(AF, -1))/1:99), time(AF)),
CUSUM = cumsum(c(0, recresid(lm(AF ~ 1)))),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2), main = "", xlab = "Time",
col = c(1, 4, 1, 4) )
plot(merge(
AF = as.zoo(ts.af),
zoo(c(NA, cumsum(head(AF, -1))/1:99), time(AF)),
CUSUM = cumsum(c(0, recresid(lm(AF ~ 1)))),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2), main = "", xlab = "Time",
col = c(1, 4, 1, 4) )
library(strucchange)
plot(merge(
AF = as.zoo(ts.af),
zoo(c(NA, cumsum(head(AF, -1))/1:99), time(AF)),
CUSUM = cumsum(c(0, recresid(lm(AF ~ 1)))),
zoo(0, time(AF))
), screen = c(1, 1, 2, 2), main = "", xlab = "Time",
col = c(1, 4, 1, 4) )
5:95
AF = as.zoo(ts.af)
plot(1996 + 4:25, sapply(4:25, function(i) {
before <- 1:i
after <- (i+1):4
res <- c(AF[before] - mean(AF[before]), AF[after] - mean(AF[after]))
sum(res^2)
}), type = "b", xlab = "Time", ylab = "RSS")
bp.nile <- breakpoints(AF ~ 1)
nile.fac <- breakfactor(bp.nile, breaks = 1 )
fm1.nile <- lm(AF ~ nile.fac - 1)
plot(bp.nile)
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
ocus.nile <- efp(AF ~ 1, type = "OLS-CUSUM")
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2) > par(opar)
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
ocus.nile
plot(ocus.nile, alt.boundary=F,main="")
ocus.nile
AF
plot(1996:2020,ocus.nile, alt.boundary=F,main="")
plot(seq(from=1996,to=2020,by=1),ocus.nile, alt.boundary=F,main="")
seq(from=1996,to=2020,by=1)
ocus.nile
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
png(file = "results/Fig_Breakpoint",res = 300,width = 216,height = 216, units = 'mm')
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
dev.off()
png(file = "results/Fig_Breakpoint.png",res = 300,width = 216,height = 216, units = 'mm')
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
dev.off()
getwd()
png(file = "../results/Fig_Breakpoint.png",res = 300,width = 216,height = 216, units = 'mm')
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
dev.off()
png(file = "../figs/Fig_Breakpoint.png",res = 300,width = 216,height = 216, units = 'mm')
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
dev.off()
options(warn=-1)
library(changepoint)
install.packages('changepoint')
library(changepoint)
cptfn <- function(data, pen) {
ans <- cpt.mean(data, test.stat="Normal", method = "PELT", penalty = "Manual", pen.value = pen)
length(cpts(ans)) +1
}
# evaluate and plot results:
plot.new()
frame()
par(mfcol=c(2,2))
# run cptfn for the signal with a known change point
pen.vals <- seq(0, 12,.2)
elbowplotData <- unlist(lapply(pen.vals, function(p)
cptfn(data = ts.af, pen = p)))
plot.ts(y_ts,type='l',col='red',
xlab = "time",
ylab = " Y(t)",
main = "Stationary signal (constant mean)")
plot.ts(ts.af,type='l',col='red',
xlab = "time",
ylab = " Y(t)",
main = "Stationary signal (constant mean)")
plot(pen.vals,elbowplotData,
xlab = "PELT penalty parameter",
ylab = " ",
main = " ")
penalty.val <- 10 # this value is determined from elbow plots
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
cpts_stationary <- cpts(cptm_stationary) # change point time points
cpts_stationary <- cpts(cptm_stationary) # change point time points
plot.new()
frame()
par(mfcol=c(1,2))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
plot(cptm_CP)
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
plot.new()
frame()
par(mfcol=c(1,2))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
plot(cptm_CP)
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
plot(cptm_CP)
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
plot(cptm_stationary)
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
# plot(cptm_stationary)
plot.new()
frame()
par(mfcol=c(1,1))
acf(ts.af,lag.max = length(y_ts),
xlab = "lag #", ylab = 'ACF', main=' ')
plot.new()
frame()
par(mfcol=c(1,1))
acf(ts.af,lag.max = length(ts.af),
xlab = "lag #", ylab = 'ACF', main=' ')
cptm_stationary
?cpt.mean
cpts_stationary
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
cptm_stationary
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
# plot(cptm_stationary)
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
# https://kevin-kotze.gitlab.io/tsm/ts-2-tut/
plot.ts(ts.af)
v_pelt <- cpt.var(ts.af, method = "PELT")
plot(v_pelt, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
v_pelt
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
plot(cptm_stationary, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
v_pelt <- cpt.var(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot(v_pelt, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
v_pelt
penalty.val
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
cptm_stationary
v_pelt <- cpt.var(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
v_pelt
v_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot.ts(ts.af)
v_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot(mv_pelt)
mv_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot(mv_pelt)
mv_pelt
df$year[15]
?cpt.meanvar
cpt.meanvar(ts.af, method ='PELT')
mv_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "AMOC")
plot(mv_pelt)
mv_pelt
# evaluate and plot results:
plot.new()
frame()
par(mfcol=c(2,2))
# run cptfn for the signal with a known change point
pen.vals <- seq(0, 12,.2)
elbowplotData <- unlist(lapply(pen.vals, function(p)
cptfn(data = ts.af, pen = p)))
plot.ts(ts.af,type='l',col='red',
xlab = "time",
ylab = " Y(t)",
main = "Stationary signal (constant mean)")
plot(pen.vals,elbowplotData,
xlab = "PELT penalty parameter",
ylab = " ",
main = " ")
cpt.mean(ts.af,method='PELT')
penalty.val <- 3 # this value is determined from elbow plots
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
cpts_stationary <- cpts(cptm_stationary) # change point time points
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
plot.new()
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
# plot(cptm_stationary)
cpts_stationary
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
cptm_stationary
penalty.val <- 15 # this value is determined from elbow plots
cptm_stationary <- cpt.mean(ts.af,    penalty='Manual',pen.value=penalty.val,method='PELT')
cpts_stationary <- cpts(cptm_stationary) # change point time points
plot.new()
frame()
par(mfcol=c(1,1))
plot(cptm_stationary,
xlab = "time",
ylab = " Y(t)",
main = "Change in mean signal")
cptm_stationary
plot.ts(ts.af)
mv_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot(mv_pelt)
mv_pelt
penalty.val <- 8 # this value is determined from elbow plots
plot.ts(ts.af)
mv_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot(mv_pelt)
mv_pelt
# evaluate and plot results:
plot.new()
frame()
par(mfcol=c(2,2))
# run cptfn for the signal with a known change point
pen.vals <- seq(0, 12,.2)
elbowplotData <- unlist(lapply(pen.vals, function(p)
cptfn(data = ts.af, pen = p)))
plot.ts(ts.af,type='l',col='red',
xlab = "time",
ylab = " Y(t)",
main = "Stationary signal (constant mean)")
plot(pen.vals,elbowplotData,
xlab = "PELT penalty parameter",
ylab = " ",
main = " ")
# evaluate and plot results:
plot.new()
frame()
par(mfcol=c(2,1))
# run cptfn for the signal with a known change point
pen.vals <- seq(0, 12,.2)
elbowplotData <- unlist(lapply(pen.vals, function(p)
cptfn(data = ts.af, pen = p)))
plot.ts(ts.af,type='l',col='red',
xlab = "time",
ylab = " Y(t)",
main = "Stationary signal (constant mean)")
plot(pen.vals,elbowplotData,
xlab = "PELT penalty parameter",
ylab = " ",
main = " ")
penalty.val <-6 # this value is determined from elbow plots
plot.ts(ts.af)
mv_pelt <- cpt.meanvar(ts.af, penalty='Manual',pen.value=penalty.val, method = "PELT")
plot(mv_pelt)
mv_pelt
bp.nile <- breakpoints(AF ~ 1)
nile.fac <- breakfactor(bp.nile, breaks = 1 )
fm1.nile <- lm(AF ~ nile.fac - 1)
plot(bp.nile)
AF = as.zoo(ts.af)
plot(1996 + 4:25, sapply(4:25, function(i) {
before <- 1:i
after <- (i+1):4
res <- c(AF[before] - mean(AF[before]), AF[after] - mean(AF[after]))
sum(res^2)
}), type = "b", xlab = "Time", ylab = "RSS")
bp.nile <- breakpoints(AF ~ 1)
nile.fac <- breakfactor(bp.nile, breaks = 1 )
fm1.nile <- lm(AF ~ nile.fac - 1)
plot(bp.nile)
ocus.nile <- efp(AF ~ 1, type = "OLS-CUSUM")
opar <- par(mfrow=c(2,1), mar=c(2,2,0,2))
plot(ocus.nile, alt.boundary=F,main="")
abline(v= 2010, lty=2, col='red')
plot(AF, ylab="Annual Flow of the river Nile") > abline(h= mean(AF),col='blue')
abline(v= 2010, lty=2, col='red')
lines(ts(predict(fm1.nile),start=1996,freq=1), col='darkgreen',lwd=2)
par(opar)
nile.fac
breakpoints
bp.nile
?breakpoints
?weeklyInterpolate
